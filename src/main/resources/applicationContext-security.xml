<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       	http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<!-- 开发环境可以放置 <debug /> 配置，会输出详细Security处理日志，正式环境建议屏蔽 <debug /> 配置 -->
   	<!--  <debug /> -->

	<!--对方法的安全拦截，此例没有设定，可能是因为BS应用对于方法拦截来说，更倾向于URL的安全拦截。ex。 <intercept-url />
	开启支持方法注解的权限控制：
	@PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
	@PostAuthorize：该注解用来在方法执行完之后进行访问控制检查。
	@PostFilter：该注解用来对方法的返回结果进行过滤。从返回的集合中过滤掉表达式值为假的元素。如@PostFilter("hasPermission(filterObject, 'read')")说明返回的结果中只保留当前用户有读权限的元素。
	@PreFilter：该注解用来对方法调用时的参数进行过滤。	
	以上注解是基于表达式的语法
	此外，你可以使用基于@Secured和jsr250(@Resource、@PostConstruct和＠PreDestroy)的语法
	-->
    <global-method-security pre-post-annotations="enabled" />

	
	
	<!-- 不用权限管理的资源路径 -->
	<http pattern="/static/**" security="none"/>
    <http pattern="/css/**" security="none"/>
    <http pattern="/icon/**" security="none"/>
    <http pattern="/images/**" security="none"/>
    <http pattern="/js/**" security="none"/>
    <http pattern="/logon" security="none"/>
    <http pattern="/rigister" security="none"/>
    <http pattern="/login" security="none"/>
    <http pattern="/getVerifyCode" security="none"/>
    <http pattern="/help" security="none"/>

    <!-- <http use-expressions="true"> -->
    <!-- 或 -->
    <!-- <http auto-config="true" /> -->
    
    <http use-expressions="true" entry-point-ref="authenticationProcessingFilterEntryPoint"  access-denied-page="/error/403.jsp">
    	
    	<!-- 指定某角色能访问的资源 -->
        <intercept-url pattern="/super/**" access="hasRole('ROLE_SUPER')"/>
        
		<!-- 以上未列出的，也都必须验证才能访问 -->
       <!--  <intercept-url pattern="/**" access="isAuthenticated()" /> -->
		 
        <!-- 所有地址全开，无需验证，测试用 -->
        <!-- <intercept-url pattern="/**" access="permitAll" /> -->
		
        <!-- 
        logout-url 属性:这个指定的URL会触发注销操作，默认是 /j_spring_security_logout
        invalidate-session 属性：如果为true，在注销的时候,会销毁会话
        delete-cookies 属性：以逗号分隔的cookies名称，在用户注销时删除指定的cookies
        -->
        <logout logout-success-url="/login" invalidate-session="true"
        			logout-url="/logout" delete-cookies="JSESSIONID"/>
        
        <!-- 实现免登陆验证 -->
        <remember-me  />

        <!--
        session超时跳转页面 以及每用户可拥有的session最大个数 
        如果每次退出后，必须要求用户一定要重开浏览器才能登录，可以将 invalid-session-url="/logout.jsp"，以防止有些 Web 应用把用户的会话标识符，直接以 URL 的参数形式来传递        
        -->
        <session-management invalid-session-url="/login">
            <concurrency-control max-sessions="1" error-if-maximum-exceeded="true" expired-url="/login" />
        </session-management>
		
		<!-- 使用验证码过滤器 -->
		<!-- <form-login /> -->
		<!-- 或 -->
		
		<custom-filter ref="customizedUsernamePasswordauthenticationFilter" position="FORM_LOGIN_FILTER" />
		
		<!-- 使用自定义的过滤器 -->
		<custom-filter ref="customizedFilterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR"/>
		
    </http>
    
    <!-- 配置登录入口点 -->
	<beans:bean id="authenticationProcessingFilterEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:property name="loginFormUrl" value="/login"/>
		<!-- 是否强制HTTPS -->
		<beans:property name="forceHttps" value="false" />
	</beans:bean>
	
	<!-- 配置自定义的支持验证码等多功能过滤器 -->
	<beans:bean id="customizedUsernamePasswordauthenticationFilter" init-method="init"
		class="com.itucity.dsmp.identity.security.CustomizedUsernamePasswordAuthenticationFilter">
		<beans:property name="filterProcessesUrl" value="/logon" />
		<!-- <beans:property name="requiresAuthenticationRequestMatcher" ref="customizedRequestMatcher" /> -->
		<beans:property name="username" value="username" />
		<beans:property name="password" value="password" />
		<beans:property name="successUrl" value="/" />
		<beans:property name="failureUrl" value="/login" />
		<beans:property name="authenticationManager" ref="customizedAuthenticationManager" />
	</beans:bean>
	
	    
    <!-- 实现了 UserDetailsService 接口的类 -->  
    <authentication-manager alias="customizedAuthenticationManager">  
        <authentication-provider user-service-ref="securityUserDetailsService">
	        <!-- 密码的加密解密类 -->
			<!-- <password-encoder ref="passwordEncoder"/> -->
			<!-- 或 -->
			<!-- <password-encoder hash="md5"/> -->
						
		</authentication-provider>
		
    </authentication-manager>
    
    <beans:bean id="customizedAccessDecisionManager" 
    	class="com.itucity.dsmp.identity.security.CustomizedAccessDecisionManager" />
		
	<beans:bean id="customizedFilterSecurityInterceptor" 
		class="com.itucity.dsmp.identity.security.CustomizedFilterSecurityInterceptor" />
	
	<beans:bean id="customizedInvocationSecurityMetadataSource" 
		class="com.itucity.dsmp.identity.security.CustomizedInvocationSecurityMetadataSource" />
	
	<beans:bean id="customizedRequestMatcher" init-method="init" 
		class="com.itucity.dsmp.identity.security.CustomizedRequestMatcher" >
		<beans:property name="filterProcessesUrl" value="/logon" />
	</beans:bean>
		
    <!-- 用户的密码加密方式 -->
	<beans:bean id="passwordEncoder" 
		class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
	
		<!-- 开启Spring Security3认证和授权日志 -->
	<beans:bean class="org.springframework.security.authentication.event.LoggerListener"/>
	<beans:bean class="org.springframework.security.access.event.LoggerListener"/>
	
</beans:beans>
